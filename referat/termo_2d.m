% Функция решения двухмерного нестационарного уравнения теплопроводности r(x,y)C(x,y)dT/dt-d/dx(k(x,y)dT/dx)- d/dy(k(x,y)dT/dy)=f(x,y) на прямоугольной области с граничными условиями Дирихле и/или Неймана

% Выходные параметры:
% х - вектор-строка координатной сетки по оси х размерностью 1 х n;
% y - вектор-строка координатной сетки по оси y размерностью 1 х m;
% t - вектор-строка сетки по оси времени размерностью 1 х s;
% T - матрица результирующих значений температуры в узлах координатной сетки размерностью n х m x s.
function[x, y, t, T] = termo_2d(
    t0  = 0,        % t0 - начальный момент времени, c;
    ts  = 6,        % ts - конечный момент времени, c;
    s   = 6,        % s - число точек сетки вдоль оси времени t;
    x0  = 0,        % x0 - начальная координата области решения по оси х, м;
    xn  = 5e-2,     % xn - конечная координата области решения по оси х, м;
    n   = 10,       % n - число точек координатной сетки вдоль оси х;
    y0  = 0,        % y0 - начальная координата области решения по оси y, м;
    ym  = 8e-2,     % ym - конечная координата области решения по оси y, м;
    m   = 20,       % m - число точек координатной сетки вдоль оси y;
    r   = '2000',   % r - функция плотности вещества, задаваемая строкой символов, заключенных в одинарные кавычки, например, 'x+2*y', кг/м^3;
    c   = '100',    % c - функция теплоемкости вещества, задаваемая строкой символов, заключенных в одинарные кавычки, Дж/(кг К);
    k   = '20',     % k - функция теплопроводности вещества, задаваемая строкой символов, заключенных в одинарные кавычки, Вт/(м К);
    f   = '0',      % f - функция плотности мощности источников тепла, задаваемая строкой символов, заключенных в одинарные кавычки, Вт/м^3;
    vt  = 1,        % vt - параметр, значение которого определяет тип начального условия (1 - Дирихле, 2 - Неймана);
    gt1 = '10*(sign(1e2*x-2)-sign(1e2*x-3) + sign(1e2*y-3)-sign(1e2*y-5))+300', % gt1- функция в правой части начального условия, задаваемая строкой символов, заключенных в одинарные кавычки, К или К/c;
    v1  = 1,        % v1 - параметр, значение которого определяет тип граничного условия на первой границе области х = х(1) (1 - ГУ Дирихле, 2 - ГУ Неймана);
    g1  = '300',    % g1 - функция в правой части граничного условия на первой границе, задаваемая строкой символов, заключенных в одинарные кавычки, К или К/м;
    v2  = 1,        % v2 - параметр, значение которого определяет тип граничного условия на второй границе области х = х(n) (1 - ГУ Дирихле, 2 - ГУ Неймана);
    g2  = '300',    % g2 - функция в правой части граничного условия на второй границе, задаваемая строкой символов, заключенных в одинарные кавычки, К или К/м;
    v3  = 1,        % v3 - параметр, значение которого определяет тип граничного условия на третьей границе области y = y(1) (1 - ГУ Дирихле, 2 - ГУ Неймана);
    g3  = '300',    % g3 - функция в правой части граничного условия на третьей границе, задаваемая строкой символов, заключенных в одинарные кавычки, К или К/м;
    v4  = 1,        % v4 - параметр, значение которого определяет тип граничного условия на четвертой границе области y = y(m) (1 - ГУ Дирихле, 2 - ГУ Неймана);
    g4  = '300'     % g4 - функция в правой части граничного условия на четвертой границе, задаваемая строкой символов, заключенных в одинарные кавычки, К или К/м.
)
    % Задание равномерной сетки
    x  = x0:(xn-x0)/(n-1):xn;
    dx = x(2) - x(1);
    
    y  = y0:(ym-y0)/(m-1):ym;
    dy = y(2) - y(1);
    
    t  = t0:(ts-t0)/(s-1):ts;
    dt = t(2) - t(1);
    
    % Вычисление значений функций, заданных символьно, в узлах координатной сетки
    F  = inline(f, 'x', 'y');
    R  = inline(r, 'x', 'y');
    C  = inline(c, 'x', 'y');
    K  = inline(k, 'x', 'y');
    GT = inline(gt1, 'x', 'y');
    G1 = inline(g1, 'y');
    G2 = inline(g2, 'y');
    G3 = inline(g3, 'x');
    G4 = inline(g4, 'x');

    % Определение размерности СЛАУ
    N = s * n * m;
    % Задание матрицы коэффициентов СЛАУ размерностью N x N, все элементы которой равны 0
    a = zeros(N, N);
    % Задание матрицы-строки свободных членов СЛАУ размерностью 1 x N, все элементы которой равны 0
    b = zeros(1, N);
    % Определение коэффициентов и свободных членов СЛАУ, соответствующих граничным условиям, и проверка корректности значений параметров vt, v1, v2, v3, v4
    for (i = 1:n)
        for (j = 1:m)
            b(m*(i-1)+j) = GT(x(i), y(j));
            if (vt == 1)
                a(m*(i-1)+j, m*(i-1)+j) = 1;
            elseif (vt == 2)
                a(m*(i-1)+j, m*(i-1)+j) = -1/dt;
                a(m*(i-1)+j, n*m+m*(i-1)+j) = 1/dt;
            else
                error('Parameter vt have incorrect value');
            end
        end
    end

    for (l = 1:s)
        for (j = 1:m)
            b(n*m*(l-1)+j) = G1(y(j));
            if (v1 == 1)
                a(n*m*(l-1)+j, n*m*(l-1)+j) = 1;
            elseif (v1 == 2)
                a(n*m*(l-1)+j, n*m*(l-1)+j) = -1/dx;
                a(n*m*(l-1)+j, n*m*(l-1)+m+j) = 1/dx;
            else
                error('Parameter v1 have incorrect value');
            end
            
            b(n*m*(l-1)+m*(n-1)+j) = G2(y(j));
            if (v2 == 1)
                a(n*m*(l-1)+m*(n-1)+j, n*m*(l-1)+m*(n-1)+j) = 1;
            elseif (v2 == 2)
                a(n*m*(l-1)+m*(n-1)+j, n*m*(l-1)+m*(n-1)+j) = 1/dx;
                a(n*m*(l-1)+m*(n-1)+j, n*m*(l-1)+m*(n-2)+j) = -1/dx;
            else
                error('Parameter v2 have incorrect value');
            end
    end
    
    for (i = 2:n-1)
        b(n*m*(l-1)+m*(i-1)+1) = G3(x(i));
        if (v3 == 1)
            a(n*m*(l-1)+m*(i-1)+1, n*m*(l-1)+m*(i-1)+1) = 1;
        elseif (v3 == 2)
            a(n*m*(l-1)+m*(i-1)+1, n*m*(l-1)+m*(i-1)+1) = -1/dy;
            a(n*m*(l-1)+m*(i-1)+1, n*m*(l-1)+m*(i-1)+2) = 1/dy;
        else
            error('Parameter v3 have incorrect value');
        end
        
        b(n*m*(l-1)+m*(i-1)+m) = G4(x(i));
        if (v4 == 1)
            a(n*m*(l-1)+m*(i-1)+m, n*m*(l-1)+m*(i-1)+m) = 1;
        elseif (v4 == 2)
            a(n*m*(l-1)+m*(i-1)+m, n*m*(l-1)+m*(i-1)+m) = 1/dy;
            a(n*m*(l-1)+m*(i-1)+m, n*m*(l-1)+m*(i-1)+m-1) = -1/dy;
        else
            error('Parameter v4 have incorrect value');
        end
    end
end

% Определение коэффициентов и свободных членов СЛАУ, соответствующих внутренним точкам области
for (l = 2:s)
    for (i = 2:n-1)
        for (j = 2:m-1)
            a(n*m*(l-1)+m*(i-1)+j, n*m*(l-1)+m*(i-1)+j) = +R(x(i),y(j))*C(x(i),y(j))/dt + (K(x(i),y(j))+K(x(i-1),y(j)))/dx^2 + (K(x(i),y(j))+K(x(i),y(j-1)))/dy^2;
            a(n*m*(l-1)+m*(i-1)+j, n*m*(l-1)+m*i+j) = -K(x(i),y(j))/dx^2;
            a(n*m*(l-1)+m*(i-1)+j, n*m*(l-1)+m*(i-2)+j) = -K(x(i-1),y(j))/dx^2;
            a(n*m*(l-1)+m*(i-1)+j, n*m*(l-1)+m*(i-1)+j+1) = -K(x(i),y(j))/dy^2;
            a(n*m*(l-1)+m*(i-1)+j, n*m*(l-1)+m*(i-1)+j-1) = -K(x(i),y(j-1))/dy^2;
            a(n*m*(l-1)+m*(i-1)+j, n*m*(l-2)+m*(i-1)+j) = -R(x(i),y(j))*C(x(i),y(j))/dt;
            b(n*m*(l-1)+m*(i-1)+j) = F(x(i),y(j));
        end
    end
end

% Решение СЛАУ
u = b/a';
% Преобразование вектора-строки значений искомой функции в узлах координатной сетки в матрицу размерностью n x m, удобную для представления результатов в графическом виде
for (l = 1:s)
    for (i = 1:n)
        for (j = 1:m)
            T(i,j,l) = u(n*m*(l-1)+m*(i-1)+j);
        end
    end
end

% Построение графиков искомой функции T(x, y, t)
for (l = 1:s)
    figure
    surf(y,x,T(:,:,l))
    xlabel('y, м')
    ylabel('x, м')
    zlabel('T, K')
    grid on
    colormap('cool')
    axis([min(y), max(y), min(x), max(x), min(min(T(:,:,1))), max(max(T(:,:,1)))])
    pause(0.1)
    M(l) = getframe;
end

figure
movie(M,10,3)
